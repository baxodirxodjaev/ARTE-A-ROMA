import { db } from "../services/firebase";
import { collection, addDoc, getDocs, deleteDoc, updateDoc, doc, orderBy, query } from "firebase/firestore";
import { Comments } from "../types";
import { useCreateQuery } from "../hooks/useCreateQuery";



// üîπ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
export const addComment = async (commentData: {userId : string, userName: string, text: string}) => {
  await addDoc(collection(db, "comments"), {
    ...commentData,
    createdAt: new Date().toISOString(),
    likes: [], 
  });
};




// üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é –¥–∞—Ç—ã)
export const getComments = async () : Promise<Comments[]> => {
  const q = query(collection(db, "comments"), orderBy("createdAt", "desc"));
  const snapshot = await getDocs(q);
  return snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() } as Comments)) ;
};

export const useComments = () => useCreateQuery<Comments>("comments", getComments);


// üîπ –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
export const deleteComment = async (commentId : string) => {
  await deleteDoc(doc(db, "comments", commentId));
};

// üîπ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∞–π–∫–∞ (userId –º–æ–∂–µ—Ç –ª–∞–π–∫–Ω—É—Ç—å —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑)
export const likeComment = async (commentId : string, userId : string, likes : string[]) => {
  const commentRef = doc(db, "comments", commentId);
  const hasLiked = likes.includes(userId);

  await updateDoc(commentRef, {
    likes: hasLiked ? likes.filter((id) => id !== userId) : [...likes, userId],
  });

  return !hasLiked; // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ –ª–∞–π–∫ –¥–æ–±–∞–≤–ª–µ–Ω, false - –µ—Å–ª–∏ —É–¥–∞–ª—ë–Ω
};
